class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def inorder_traversal(root):
    result = []
    def dfs(node):
        if node:
            dfs(node.left)
            result.append(node.val)
            dfs(node.right)
    dfs(root)
    return result

root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)

print(inorder_traversal(root))

output:

[2, 1, 3]

=== Code Execution Successful ===


class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def preorder_traversal(root):
    result = []
    def dfs(node):
        if node:
            result.append(node.val)
            dfs(node.left)
            dfs(node.right)
    dfs(root)
    return result

root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)

print(preorder_traversal(root))

output:

[1, 2, 3]

=== Code Execution Successful ===


class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def postorder_traversal(root):
    result = []
    def dfs(node):
        if node:
            dfs(node.left)
            dfs(node.right)
            result.append(node.val)
    dfs(root)
    return result

root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)

print(postorder_traversal(root))

output:

[2, 3, 1]

=== Code Execution Successful ===